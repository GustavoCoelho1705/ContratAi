// <auto-generated />
using System;
using ContratAi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ContratAi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250519234124_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContratAi.Core.Entities.Avaliacoes.AvaliacaoPrestador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Nota")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PrestadorServicoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("PrestadorServicoId");

                    b.ToTable("AvaliacaoPrestador");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Eventos.Convidado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<bool>("Confirmado")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("EventoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.ToTable("Convidados");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Eventos.Evento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<int>("Capacidade")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("OrganizadorId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizadorId");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Eventos.EventoServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataContratacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EventoId")
                        .HasColumnType("uuid");

                    b.Property<int>("HorasContratadas")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ServicoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicoPrestadoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("EventoId");

                    b.HasIndex("ServicoId");

                    b.HasIndex("ServicoPrestadoId");

                    b.ToTable("EventosServicos");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Servicos.CategoriaServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("CategoriasServico");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57c7d304-7347-4e6e-afad-b697984f732c"),
                            Ativo = false,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2025, 5, 19, 23, 41, 23, 669, DateTimeKind.Utc).AddTicks(5682),
                            Descricao = "Serviços de alimentação e bebidas para eventos.",
                            Nome = "Buffet"
                        },
                        new
                        {
                            Id = new Guid("45da13f4-ed65-4e54-9aae-722a5d5383c8"),
                            Ativo = false,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2025, 5, 19, 23, 41, 23, 669, DateTimeKind.Utc).AddTicks(5687),
                            Descricao = "Serviços de fotografia e filmagem.",
                            Nome = "Fotografia"
                        },
                        new
                        {
                            Id = new Guid("69af3f2d-c049-4136-a962-ec6660b8e824"),
                            Ativo = false,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2025, 5, 19, 23, 41, 23, 669, DateTimeKind.Utc).AddTicks(5690),
                            Descricao = "Serviços de garçons e atendimento.",
                            Nome = "Garçom"
                        },
                        new
                        {
                            Id = new Guid("f3d099ae-1aff-4fdb-843e-d5e44d076cde"),
                            Ativo = false,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2025, 5, 19, 23, 41, 23, 669, DateTimeKind.Utc).AddTicks(5693),
                            Descricao = "Serviços de decoração de ambientes para eventos.",
                            Nome = "Decoração"
                        },
                        new
                        {
                            Id = new Guid("cb34e66e-63a0-40d0-b48d-83574d688370"),
                            Ativo = false,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2025, 5, 19, 23, 41, 23, 669, DateTimeKind.Utc).AddTicks(5695),
                            Descricao = "Serviços de sonorização e iluminação para eventos.",
                            Nome = "Som e Iluminação"
                        });
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Servicos.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoriaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Servicos");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Servicos.ServicoPrestado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("HorasMinimas")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecoHora")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("PrestadorServicoId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PrestadorServicoId");

                    b.HasIndex("ServicoId");

                    b.ToTable("ServicosPrestados");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.Funcao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Funcoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b4abcb20-2607-4ce6-b14a-973a5ea51be3"),
                            Ativo = false,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2025, 5, 19, 23, 41, 23, 673, DateTimeKind.Utc).AddTicks(1360),
                            Descricao = "Administrador",
                            Tipo = 1
                        },
                        new
                        {
                            Id = new Guid("0ca3cb2c-9dff-4815-bc0e-bb1465c2ba21"),
                            Ativo = false,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2025, 5, 19, 23, 41, 23, 673, DateTimeKind.Utc).AddTicks(1385),
                            Descricao = "Organizador de Eventos",
                            Tipo = 2
                        },
                        new
                        {
                            Id = new Guid("d19d008b-7968-442f-bbc9-8a4b103471f5"),
                            Ativo = false,
                            DataAtualizacao = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCriacao = new DateTime(2025, 5, 19, 23, 41, 23, 673, DateTimeKind.Utc).AddTicks(1388),
                            Descricao = "Prestador de Serviços",
                            Tipo = 3
                        });
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.OrganizadorEvento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Empresa")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("OrganizadoresEvento");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.PrestadorServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AreaAtuacao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<decimal>("AvaliacaoMedia")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescricaoServicos")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("PrestadoresServico");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.UsuarioFuncao", b =>
                {
                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FuncaoId")
                        .HasColumnType("uuid");

                    b.HasKey("UsuarioId", "FuncaoId");

                    b.HasIndex("FuncaoId");

                    b.ToTable("UsuariosFuncoes");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Avaliacoes.AvaliacaoPrestador", b =>
                {
                    b.HasOne("ContratAi.Core.Entities.Eventos.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContratAi.Core.Entities.Usuarios.PrestadorServico", "PrestadorServico")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("PrestadorServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("PrestadorServico");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Eventos.Convidado", b =>
                {
                    b.HasOne("ContratAi.Core.Entities.Eventos.Evento", "Evento")
                        .WithMany("Convidados")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Eventos.Evento", b =>
                {
                    b.HasOne("ContratAi.Core.Entities.Usuarios.OrganizadorEvento", "Organizador")
                        .WithMany("Eventos")
                        .HasForeignKey("OrganizadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizador");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Eventos.EventoServico", b =>
                {
                    b.HasOne("ContratAi.Core.Entities.Eventos.Evento", "Evento")
                        .WithMany("ServicosContratados")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContratAi.Core.Entities.Servicos.Servico", null)
                        .WithMany("Eventos")
                        .HasForeignKey("ServicoId");

                    b.HasOne("ContratAi.Core.Entities.Servicos.ServicoPrestado", "ServicoPrestado")
                        .WithMany()
                        .HasForeignKey("ServicoPrestadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("ServicoPrestado");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Servicos.Servico", b =>
                {
                    b.HasOne("ContratAi.Core.Entities.Servicos.CategoriaServico", "Categoria")
                        .WithMany("Servicos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Servicos.ServicoPrestado", b =>
                {
                    b.HasOne("ContratAi.Core.Entities.Usuarios.PrestadorServico", "PrestadorServico")
                        .WithMany("Servicos")
                        .HasForeignKey("PrestadorServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContratAi.Core.Entities.Servicos.Servico", "Servico")
                        .WithMany("Prestadores")
                        .HasForeignKey("ServicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrestadorServico");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.OrganizadorEvento", b =>
                {
                    b.HasOne("ContratAi.Core.Entities.Usuarios.Usuario", "Usuario")
                        .WithOne("OrganizadorEvento")
                        .HasForeignKey("ContratAi.Core.Entities.Usuarios.OrganizadorEvento", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.PrestadorServico", b =>
                {
                    b.HasOne("ContratAi.Core.Entities.Usuarios.Usuario", "Usuario")
                        .WithOne("PrestadorServico")
                        .HasForeignKey("ContratAi.Core.Entities.Usuarios.PrestadorServico", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.UsuarioFuncao", b =>
                {
                    b.HasOne("ContratAi.Core.Entities.Usuarios.Funcao", "Funcao")
                        .WithMany("Usuarios")
                        .HasForeignKey("FuncaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContratAi.Core.Entities.Usuarios.Usuario", "Usuario")
                        .WithMany("Funcoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Funcao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Eventos.Evento", b =>
                {
                    b.Navigation("Convidados");

                    b.Navigation("ServicosContratados");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Servicos.CategoriaServico", b =>
                {
                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Servicos.Servico", b =>
                {
                    b.Navigation("Eventos");

                    b.Navigation("Prestadores");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.Funcao", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.OrganizadorEvento", b =>
                {
                    b.Navigation("Eventos");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.PrestadorServico", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Servicos");
                });

            modelBuilder.Entity("ContratAi.Core.Entities.Usuarios.Usuario", b =>
                {
                    b.Navigation("Funcoes");

                    b.Navigation("OrganizadorEvento");

                    b.Navigation("PrestadorServico");
                });
#pragma warning restore 612, 618
        }
    }
}
